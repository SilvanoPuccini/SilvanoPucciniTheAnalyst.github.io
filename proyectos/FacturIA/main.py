import funciones
import pandas as pd
import os
from sqlalchemy import create_engine

# Crear un DataFrame vac√≠o para almacenar todas las facturas
df = pd.DataFrame()

# Recorrer todas las carpetas dentro de la carpeta "facturas"
for carpeta in sorted(os.listdir("./facturas")):
    ruta_carpeta = os.path.join("./facturas/", carpeta)

    # Recorrer todos los archivos dentro de la carpeta
    for archivo in os.listdir(ruta_carpeta):
        ruta_pdf = os.path.join(ruta_carpeta, archivo)

        print(f"üìÑ Procesando factura: {ruta_pdf}")

        # Extraer texto de la factura
        texto_no_estructurado = funciones.extraer_texto_pdf(ruta_pdf)

        # Estructurar el texto de la factura
        texto_estructurado = funciones.estructurar_texto(texto_no_estructurado)

        # Convertir texto estructurado en dataframe
        df_factura = funciones.csv_a_dataframe(texto_estructurado)

        # Solo anexar si el dataframe no est√° vac√≠o
        if not df_factura.empty:
            # Anexar el dataframe de la factura al dataframe general
            df = pd.concat([df, df_factura], ignore_index=True)
            print("‚úÖ Factura procesada correctamente\n")
        else:
            print("‚ö†Ô∏è  Factura omitida (no se pudo procesar)\n")

    # Si la moneda es "dolares" convertir a euros multiplicando por 0,9243
    if not df.empty and "moneda" in df.columns:
        df.loc[df["moneda"] == "dolares", "importe"] *= 0.9243

    # Eliminar las columnas no esenciales
    if not df.empty:
        df = df.iloc[:, 0:4]

# Verificar si hay datos para guardar
if df.empty:
    print("\n‚ö†Ô∏è  No se procesaron facturas exitosamente. No hay datos para guardar.")
    print("Revisa que:")
    print("  1. Los PDFs contengan texto legible (no solo im√°genes)")
    print("  2. Tu API key de Google Gemini est√© configurada correctamente en el archivo .env")
    print("  3. Tu API key de Google Gemini sea v√°lida")
else:
    # Guardar el DataFrame final en una bbdd sqlite
    # Crear una conexi√≥n a la base de datos SQLite
    engine = create_engine("sqlite:///facturas.db")

    # Guardar el DataFrame final en una bbdd sqlite, a√±adiendo los datos en lugar de reemplazarlos
    df.to_sql("facturas", engine, if_exists="append", index=False)

    # Cerrar la conexi√≥n a la base de datos
    engine.dispose()

    print("\n" + "="*60)
    print("‚úÖ Proceso de extracci√≥n y estructuraci√≥n de facturas completado exitosamente.")
    print(f"‚úÖ {len(df)} factura(s) guardada(s) en la base de datos 'facturas.db'.")
    print("="*60)
